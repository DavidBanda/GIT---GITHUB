commands:

diff: this command take two files or even two directories and show the
differences between them in a few formats.

    example:
        - diff oldFile.py newFile.py
        - diff -u oldFile.py newFile.py
        - diff -u oldFile.py newFile.py > change.diff

patch: takes a file generated by diff and applies the changes to 
the original file

    example:
        - patch file.py < change.diff

Git Commands:

    -- Basic Commands --

git init: start repository from scratch. we initialize an empty git 
repository (Git Directory) in the current directory

    example: 
        - git init

git add: we add our file or files to the Staging Area

    example: 
        - git add file.py
        - git add .
        - git add -p: ask for each change made it, and only
        add that we want to commit

git status: Get some information about the current Working Tree and
pending changes.

    example:
        - git status

git commit: command to get commited into the Git Directory

    example:
        - git commit
        - git commit -m "commit message"
        - git commit -a -m "commit message": A shortcut to stage any 
        changes to tracked files and commit them in one step 

git branch: A pointer to a particular commit

    example:
        - git branch: list all branches 
        - git branch <branch_name>: creates a new branch
        - git checkout <branch_name>: switch to a branch
        - git checkout -b <branch_name>: creates a new branch and
        switches to it in a single step
        - git branch -d <branch_name>: delete a branch

git merge: Combining branched data and history together
    
    example:
        - git merge <branch_name>: merge another branch into the current 
        you are
        - git merge --abort: stop the merge and reset the files in your working 
        tree back to the previous commit before the merge ever happened.


    -- Remote Basic Commands -- 

git clone: Is used to clone a remote repository into a local workspace

    example:
        - git clone URL

git push: Is used to push commits from your local repo to a remote repo

    example:
        - git push
        - git push -u origin <branch_name>: push a branch to a remote repo

git pull: Is used to fetch the newest updates from a remote repository

    example:
        - git pull

git fetch: fetches remote updates but doesnt merge. fetch only branches

    example:
        - git fetch
        - git merge origin/master: merge remote branches into our master branch

git remote: See the URL's associated with the origin remote

    example:
        - git remote -v
        - git remote show origin: get more information
        - git remote update: Fetch the contents of all remote branches,
        wothout merging any content into the local branches.

git branch: 

    example: 
        - git branch -r: lists remote branches

git rebase: git will try to replay our commits after the latest commit 
in that branch. keep our history linear

    example:
        - git rebase


    -- Modify/Delete/Reset Files --

git restore: discard changes in working directory

    example: 
        - git restore file.py
        - git restore -p file.py: check each individual change.

git reset: resetting our changes to whatever is in the current snapshot. 
(staging area)

    example:
        - git reset HEAD file.txt
        - git reset -p: ask which specific changes you want to reset

git commit amend: Take whatever is currently in our staging area and 
overwrite the previous commit. (Local Commits Only)

    example:
        - git commit --amend

git revert: it creates a commit that contains the inverse of all the changes
made in the bad commit in order to cancel them out. Reverts the changes from 
the previous commit wherever HEAD is.

- Always add a 'Rollback reason' on middle.
    
    example:
        - git revert HEAD 
        - git revert ID_COMMIT

git rm: Stop the file from being tracked by git and removed it from
from the git directory.
    
    example:
        - git rm file.py

git mv: Rename files in the repository

    example:
        - git mv oldFile.py newFile.py


    -- Display Info --

git log: display commit messages

    example:
        - git log
        - git log --stat: show insertions and deletions
        - git log -p: show commits and display information about each one

git show: this command takes a commit ID as a parameter and display
information 

    example:
        - git show <id_commit>

git diff: see all the changes that been made it, and we can pass as a 
parameter a file to see changes of that file instead all the changes.

    example:
        - git diff
        - git --staged: changes that are staged but no committed


    -- Show Git Config --

git config: see all git config
    example:
        - git config -l


concepts: 

    - Working Tree -
    Is the current version of your project.

    - Staging Area (Index) -
    A file maintained by Git that contains all of the information about
    what files and changes are going to go into your next commit.

    - Git Directory -
    Contains all the changes of the project and their history. 

    - Good Commit Message -
    first line: short summary of the commit (50 chars or less)
    blank line:
    next lines: full description of the changes which details
    why they're necessary or anything especially interesting
    about them or difficult to understand

    - Git Ignore - 
    Inside of this file we specify rules to tell git which files to
    skip for the current repo.

    - Remote Branches -
    It's like a local branches but in the remote branches





