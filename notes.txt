commands:

diff: this command take two files or even two directories and show the
differences between them in a few formats.

    example:
        - diff oldFile.py newFile.py
        - diff -u oldFile.py newFile.py
        - diff -u oldFile.py newFile.py > change.diff

patch: takes a file generated by diff and applies the changes to 
the original file

    example:
        - patch file.py < change.diff

git commands:

git init: start repository from scratch. we initialize an empty git 
repository (Git Directory) in the current directory

    example: 
        - git init

git add: we add our file or files to the Staging Area

    example: 
        - git add file.py
        - git add .
        - git add -p: ask for each change made it, and only
        add that we want to commit

git status: Get some information about the current Working Tree and
pending changes.

    example:
        - git status

git commit: command to get commited into the Git Directory

    example:
        - git commit
        - git commit -m "commit message"
        - git commit -a -m "commit message": A shortcut to stage any 
        changes to tracked files and commit them in one step


git log: display commit messages

    example:
        - git log
        - git log --stat: show insertions and deletions
        - git log -p: show commits and display information about each one

git show: this command takes a commit ID as a parameter and display
information 

    example:
        - git show ID_COMMIT

git diff: see all the changes that been made it, and we can pass as a 
parameter a file to see changes of that file instead all the changes.

    example:
        - git diff
        - git --staged: changes that are staged but no committed
        


git config: see all git config
    example:
        - git config -l

concepts: 
    - Staging Area (Index) -
    A file maintained by Git that contains all of the information about
    what files and changes are going to go into your next commit.

    - Working Tree -
    Is the current version of your project.

    - Git Directory -
    Contains all the changes of the project and their history. 

    - Good Commit Message -
    first line: short summary of the commit (50 chars or less)
    blank line:
    next lines: full description of the changes which details
    why they're necessary or anything especially interesting
    about them or difficult to understand